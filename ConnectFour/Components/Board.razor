@inject GameState State;
@using System.Drawing

<div>
    <HeadContent>
        <style>
            :root {
                --board-bg: @ColorTranslator.ToHtml(BoardColor);
                --player1: @ColorTranslator.ToHtml(Player1Color);
                --player2: @ColorTranslator.ToHtml(Player2Color);
            }
        </style>
    </HeadContent>

@* <div class="game-container" 
     style="--board-bg: @ColorTranslator.ToHtml(BoardColor); --player1: @ColorTranslator.ToHtml(Player1Color); --player2: @ColorTranslator.ToHtml(Player2Color);">
        <div class="controls-section" role="region" aria-label="Game Controls">
            <h3>üé® Customize Colors</h3>
            <div class="color-picker">
                <label for="board-color">Board:</label>
                <input type="color" id="board-color" value="@ColorTranslator.ToHtml(BoardColor)" 
                       @onchange="(e) => UpdateBoardColor(e.Value?.ToString())" 
                       aria-label="Select board color" />
            </div>
            <div class="color-picker">
                <label for="player1-color">Player 1:</label>
                <input type="color" id="player1-color" value="@ColorTranslator.ToHtml(Player1Color)" 
                       @onchange="(e) => UpdatePlayer1Color(e.Value?.ToString())" 
                       aria-label="Select player 1 piece color" />
            </div>
            <div class="color-picker">
                <label for="player2-color">Player 2:</label>
                <input type="color" id="player2-color" value="@ColorTranslator.ToHtml(Player2Color)" 
                       @onchange="(e) => UpdatePlayer2Color(e.Value?.ToString())" 
                       aria-label="Select player 2 piece color" />
            </div>
        </div>

        <!-- Statistics Panel -->
        <div class="stats-panel" role="region" aria-label="Game Statistics">
            <h3>üìä Game Statistics</h3>
            <div class="stats-row">
                <span>Player 1 Consecutive Wins:</span>
                <span>@player1ConsecutiveWins</span>
            </div>
            <div class="stats-row">
                <span>Player 2 Consecutive Wins:</span>
                <span>@player2ConsecutiveWins</span>
            </div>
            <div class="stats-row">
                <span>Total Games Played:</span>
                <span>@totalGamesPlayed</span>
            </div>
        </div>

        <!-- Moves History -->
        @if (movesHistory.Count > 0)
        {
            <div class="moves-history" role="region" aria-label="Moves History">
                <h3>üìù Moves History (Game @(totalGamesPlayed + 1))</h3>
                <div>
                    @foreach (var move in movesHistory)
                    {
                        <div class="move-item">@move</div>
                    }
                </div>
            </div>
        }

        <!-- Game Navigation -->
        <nav class="game-nav" role="navigation" aria-label="Game Navigation">
            @for (byte i = 0; i < 7; i++)
            {
                var col = i;
                <button class="column-button" 
                        title="Click to play a piece in column @(col + 1)" 
                        @onclick="() => PlayPiece(col)"
                        disabled="@(!string.IsNullOrEmpty(winnerMessage))"
                        aria-label="Drop piece in column @(col + 1)">
                    üîΩ
                </button>
            }
        </nav>

        <!-- Game Status -->
        <article role="status" aria-live="polite">
            @if (!string.IsNullOrEmpty(winnerMessage))
            {
                <div class="status-message winner-message">
                    @winnerMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(CurrentTurn))
            {
                <div class="status-message current-turn">
                    @CurrentTurn
                </div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="status-message error-message" role="alert">
                    @errorMessage
                </div>
            }
        </article>

        <!-- Game Controls -->
        <div class="game-nav" style="text-align: center; margin: 20px 0;">
            <button @onclick="ResetGame" aria-label="Reset the current game">
                üîÑ Reset Game
            </button>
            <button @onclick="ClearHistory" aria-label="Clear all game statistics and history">
                üóëÔ∏è Clear History
            </button>
        </div>

        <!-- Game Board -->
        <div role="grid" aria-label="Connect Four Game Board">
            <div class="board">
                @for (var i = 0; i < 42; i++)
                {
                    <span class="container">
                        <span></span>
                    </span>
                }
            </div>
            @for (var i = 0; i < 42; i++)
            {
               <span class="@pieces[i]" role="gridcell" aria-label="@GetCellDescription(i)"></span>
            }
        </div>
    </div>
</div> *@


<div class="game-container" 
     style="--board-bg: @ColorTranslator.ToHtml(BoardColor); --player1: @ColorTranslator.ToHtml(Player1Color); --player2: @ColorTranslator.ToHtml(Player2Color);">

    <!-- Color Selection Controls -->
    <div class="controls-section" role="region" aria-label="Game Controls">
        <h3>üé® Customize Colors</h3>
        <div class="color-picker">
            <label for="board-color">Board:</label>
            <input type="color" id="board-color" value="@ColorTranslator.ToHtml(BoardColor)" 
                   @onchange="(e) => UpdateBoardColor(e.Value?.ToString())" 
                   aria-label="Select board color" />
        </div>
        <div class="color-picker">
            <label for="player1-color">Player 1:</label>
            <input type="color" id="player1-color" value="@ColorTranslator.ToHtml(Player1Color)" 
                   @onchange="(e) => UpdatePlayer1Color(e.Value?.ToString())" 
                   aria-label="Select player 1 piece color" />
        </div>
        <div class="color-picker">
            <label for="player2-color">Player 2:</label>
            <input type="color" id="player2-color" value="@ColorTranslator.ToHtml(Player2Color)" 
                   @onchange="(e) => UpdatePlayer2Color(e.Value?.ToString())" 
                   aria-label="Select player 2 piece color" />
        </div>
    </div>

    <!-- Statistics Panel -->
    <div class="stats-panel" role="region" aria-label="Game Statistics">
        <h3>üìä Game Statistics</h3>
        <div class="stats-row">
            <span>Player 1 Consecutive Wins:</span>
            <span>@player1ConsecutiveWins</span>
        </div>
        <div class="stats-row">
            <span>Player 2 Consecutive Wins:</span>
            <span>@player2ConsecutiveWins</span>
        </div>
        <div class="stats-row">
            <span>Total Games Played:</span>
            <span>@totalGamesPlayed</span>
        </div>
    </div>

    <!-- Moves History -->
    @if (movesHistory.Count > 0)
    {
        <div class="moves-history" role="region" aria-label="Moves History">
            <h3>üìù Moves History (Game @(totalGamesPlayed + 1))</h3>
            <div>
                @foreach (var move in movesHistory)
                {
                    <div class="move-item">@move</div>
                }
            </div>
        </div>
    }

    <!-- Game Navigation -->
    <nav class="game-nav" role="navigation" aria-label="Game Navigation">
        @for (byte i = 0; i < 7; i++)
        {
            var col = i;
            <button class="column-button" 
                    title="Click to play a piece in column @(col + 1)" 
                    @onclick="() => PlayPiece(col)"
                    disabled="@(!string.IsNullOrEmpty(winnerMessage))"
                    aria-label="Drop piece in column @(col + 1)">
                üîΩ
            </button>
        }
    </nav>

    <!-- Game Status -->
    <article role="status" aria-live="polite">
        @if (!string.IsNullOrEmpty(winnerMessage))
        {
            <div class="status-message winner-message">
                @winnerMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(CurrentTurn))
        {
            <div class="status-message current-turn">
                @CurrentTurn
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="status-message error-message" role="alert">
                @errorMessage
            </div>
        }
    </article>

    <!-- Game Controls -->
    <div class="game-nav" style="text-align: center; margin: 20px 0;">
        <button @onclick="ResetGame" aria-label="Reset the current game">
            üîÑ Reset Game
        </button>
        <button @onclick="ClearHistory" aria-label="Clear all game statistics and history">
            üóëÔ∏è Clear History
        </button>
    </div>

    <!-- Game Board -->
    <div role="grid" aria-label="Connect Four Game Board">
        <div class="board">
            @for (var i = 0; i < 42; i++)
            {
                <span class="container">
                    <span></span>
                </span>
            }
        </div>
        @for (var i = 0; i < 42; i++)
        {
           <span class="@pieces[i]" role="gridcell" aria-label="@GetCellDescription(i)"></span>
        }
    </div>
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;
    
    // Statistics tracking
    private int player1ConsecutiveWins = 0;
    private int player2ConsecutiveWins = 0;
    private int totalGamesPlayed = 0;
    
    // Moves history
    private List<string> movesHistory = new List<string>();

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

    private void PlayPiece(byte col)
    {
        try
        {
            errorMessage = string.Empty;
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
            
            // Add move to history
            movesHistory.Add($"Move {movesHistory.Count + 1}: Player {player} ‚Üí Column {col + 1}");

            // Check for win after the move
            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "üéâ Player 1 Wins!",
                GameState.WinState.Player2_Wins => "üéâ Player 2 Wins!",
                GameState.WinState.Tie => "ü§ù It's a tie!",
                _ => ""
            };
            
            // Update statistics if game ended
            if (!string.IsNullOrEmpty(winnerMessage))
            {
                totalGamesPlayed++;
                
                if (winnerMessage.Contains("Player 1"))
                {
                    player1ConsecutiveWins++;
                    player2ConsecutiveWins = 0; // Reset player 2's streak
                }
                else if (winnerMessage.Contains("Player 2"))
                {
                    player2ConsecutiveWins++;
                    player1ConsecutiveWins = 0; // Reset player 1's streak
                }
                // For ties, we don't reset streaks
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("#FFEB3B");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("#F44336");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("#2196F3");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
        movesHistory.Clear();
    }
    
    private void ClearHistory()
    {
        player1ConsecutiveWins = 0;
        player2ConsecutiveWins = 0;
        totalGamesPlayed = 0;
        ResetGame();
    }

    // Color update methods
    private void UpdateBoardColor(string? hexColor)
    {
        if (!string.IsNullOrEmpty(hexColor))
        {
            try
            {
                BoardColor = ColorTranslator.FromHtml(hexColor);
                StateHasChanged();
            }
            catch
            {
                // Handle invalid color
            }
        }
    }

    private void UpdatePlayer1Color(string? hexColor)
    {
        if (!string.IsNullOrEmpty(hexColor))
        {
            try
            {
                Player1Color = ColorTranslator.FromHtml(hexColor);
                StateHasChanged();
            }
            catch
            {
                // Handle invalid color
            }
        }
    }

    private void UpdatePlayer2Color(string? hexColor)
    {
        if (!string.IsNullOrEmpty(hexColor))
        {
            try
            {
                Player2Color = ColorTranslator.FromHtml(hexColor);
                StateHasChanged();
            }
            catch
            {
                // Handle invalid color
            }
        }
    }
    
    // Accessibility helper
    private string GetCellDescription(int index)
    {
        var row = index / 7;
        var col = index % 7;
        var piece = pieces[index];
        
        if (string.IsNullOrEmpty(piece))
            return $"Empty cell at row {row + 1}, column {col + 1}";
        else if (piece.Contains("player1"))
            return $"Player 1 piece at row {row + 1}, column {col + 1}";
        else if (piece.Contains("player2"))
            return $"Player 2 piece at row {row + 1}, column {col + 1}";
        else
            return $"Cell at row {row + 1}, column {col + 1}";
    }
}